<?php

namespace telegram;

use bitly\RestApi;
use exceptions\FormatException;
use exceptions\ShortLinkNotFoundedException;

require('Log/FLogger.php');
require('TIniFileEx.php');
require('bitly/RestApi.php');
require_once("exceptions/FormatException.php");
require_once('telegram/BotApi.php');

/**
 * Class Bot
 *
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç-–±–æ—Ç—É
 *
 * @package telegram –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
 */
class Bot
{

    /**
     * @var \FLogger –õ–æ–≥–≥–µ—Ä
     */
    private $log;
    /**
     * @var \TIniFileEx
     */
    private $config;
    /**
     * @var string
     */
    private $lastupdate;
    /**
     * @var \TIniFileEx
     */
    private $users;
    /**
     * @var RestApi
     */
    private $bitlyApi;
    /**
     * @var
     */
    private $historyindex;
    /**
     * @var array –∫–Ω–æ–ø–∫–∏
     */
    private $inlineKeyboards;
    /**
     * @var string
     */
    private $tutorial = "–ü–æ–º–æ—â—å\n\n1) –ö–∞–∫ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å URL?\n–î–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è URL, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç—É.\n–í –æ—Ç–≤–µ—Ç –æ–Ω –ø—Ä–∏—à–ª–µ—Ç –í–∞–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É.\n2) –ö–∞–∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É?\n–î–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, bit.ly/2CF5z2o), –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç—É.\n–í –æ—Ç–≤–µ—Ç –æ–Ω –ø—Ä–∏—à–ª–µ—Ç –í–∞–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Å—ã–ª–∫—É.\n3) –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫?\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ò—Å—Ç–æ—Ä–∏—è\", —Å–Ω–∏–∑—É –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —á–∞—Ç–∞.\n–í–∞–º –ø—Ä–∏–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Å—ã–ª–æ–∫. –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n\n–î–ª—è –≤—ã–∑–æ–≤–∞ —ç—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ü–æ–º–æ—â—å\" —Å–Ω–∏–∑—É –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞.";


    /**
     * Bot constructor.
     *
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     *
     */
    public function __construct()
    {
        $this->inlineKeyboards = [
            "inline_keyboard" => [
                [
                    (object)[
                        "text" => "<",
                        "callback_data" => "prev"
                    ],
                    (object)[
                        "text" => ">",
                        "callback_data" => "next"
                    ]
                ]
            ]
        ];
        $this->bitlyApi = new RestApi();
        $this->botApi = new BotApi();

        $this->users = new \TIniFileEx("Log/users.ini");
        $this->config = new \TIniFileEx("config.ini");

        $this->log = new \FLogger($this->config->read('main', "logFile"));
        $this->lastupdate = $this->config->read('main', "lastUpdateID");
    }

    /**
     *
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
     *
     * @param string $message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param string $chat_id –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
     */
    public function sendLink($message, $chat_id)
    {
        try {
            if (
                preg_match('/^(https?:\/\/)?bit\.ly(\/[\w\.]*)*\/?$/', $message) ||
                preg_match('/^(https?:\/\/)?j\.mp(\/[\w\.]*)*\/?$/', $message)
            ) {
                $this->botApi->sendMessage($this->bitlyApi->expand($message), $chat_id);
            } else if (preg_match('/^(https?:\/\/)?([\w\.]+)\.([a-z]{2,6}\.?)(\/[\w&?=\-\.]*)*\/?$/', $message)) {
                $this->botApi->sendMessage($this->bitlyApi->createBitlink($message), $chat_id);
            } else {
                throw new FormatException('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏');
            }
        } catch (ShortLinkNotFoundedException $e) {
            $this->botApi->sendMessage($e->getMessage(), $chat_id);
        } catch (FormatException $e) {
            $this->botApi->sendMessage($e->getMessage(), $chat_id);
        }
    }

    /**
     *
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
     *
     * @param array $history –ú–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫
     * @return string –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Å—ã–ª–æ–∫
     */
    private function renderHistory($history)
    {
        $content = "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: \n\n";
        foreach ($history as $i) {
            $content .= $i['title'] . "\n";
            $content .= "üîó " . $i['long_url'] . "\n\n" . "‚û° " . $i['link'] . "\n---------\n";
        }
        return $content;
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —á–∞—Ç-–±–æ—Ç–∞
     */
    public function run()
    {
        while (true) {
            $this->log->log("–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ");
            $updates = $this->botApi->getUpdates($this->lastupdate)["result"];
            $this->log->log("–∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª");

            echo "<pre>";
            var_dump($updates);
            echo "</pre>";

            $chat_id = null;
            $chat = null;
            $message = null;
            $update_id = null;

            foreach ($updates as $update) {
                $update_id = $update["update_id"];
                if ($update["callback_query"] === null) {
                    $have_callback_query = false;
                    $chat = $update["message"]["chat"];
                    $chat_id = $chat["id"];
                    $this->log->log("id —á–∞—Ç–∞: " . $chat_id);
                    $message = $update["message"]["text"];
                    $user = $update["message"]["from"];
                } else {
                    $have_callback_query = true;
                    $callback_query = $update["callback_query"];
                    $message_id = $callback_query["message"]['message_id'];
                    $chat_id = $callback_query["message"]["chat"]["id"];
                    $user = $callback_query["message"]["from"];
                    $message = $callback_query["data"];
                    if ($this->historyindex["$message_id"] === null) {
                        $this->historyindex["$message_id"]["offset"] = 0;
                    }
                }

                switch ($message) {
                    case "/start":
                        $this->infoAboutU($user, $chat_id);

                        $this->log->log("—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã");
                        $keyboards = [["–ò—Å—Ç–æ—Ä–∏—è"], ["–ü–æ–º–æ—â—å"]];
                        $keyboardSettings = array(
                            "resize_keyboard" => true,
                        );
                        $this->botApi->keyboard($this->tutorial, $chat_id, $keyboards, $keyboardSettings);
                        $this->log->log("–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞");
                        break;

                    case "–ò—Å—Ç–æ—Ä–∏—è":
                        $this->log->log("—Å–æ–∑–¥–∞–Ω–∏–µ —è—Ä–ª—ã–∫–∞");

                        $history = $this->bitlyApi->getExistLinks();

                        $content = $this->renderHistory($history);

                        $this->botApi->inlineKeyboard($content, $chat_id, $this->inlineKeyboards);
                        $this->log->log("—è—Ä–ª—ã–∫ —Å–æ–∑–¥–∞–Ω");
                        break;

                    case "/help":
                    case "–ü–æ–º–æ—â—å":
                        $this->log->log("–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ");
                        $this->botApi->sendMessage($this->tutorial, $chat_id);
                        $this->log->log("—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
                        break;

                    case "prev":
                        if ($have_callback_query) {

                            if ($this->historyindex["$message_id"]["offset"] !== 0) {
                                $this->historyindex["$message_id"]["offset"] -= 3;
                            }

                            $history = $this->bitlyApi->getExistLinks(
                                $this->historyindex["$message_id"]["offset"]
                            );

                            $content = $this->renderHistory($history);

                            $this->botApi->editMessageText($content, $chat_id, $message_id, $this->inlineKeyboards);
                        } else {
                            $this->botApi->sendMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏', $chat_id);
                        }
                        break;

                    case "next":
                        if ($have_callback_query) {

                            $this->historyindex["$message_id"]["offset"] += 3;

                            try {
                                $history = $this->bitlyApi->getExistLinks(
                                    $this->historyindex["$message_id"]["offset"]
                                );
                            } catch (\Exception $ex) {
                                $this->historyindex["$message_id"]["offset"] -= 3;
                                break;
                            }

                            $content = $this->renderHistory($history);

                            $this->botApi->editMessageText($content, $chat_id, $message_id, $this->inlineKeyboards);
                        } else {
                            $this->botApi->sendMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏', $chat_id);
                        }
                        break;

                    default:
                        $this->log->log("–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ");
                        $this->sendLink($message, $chat_id);
                        $this->log->log("—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
                }
            }

            $this->lastupdate = $update_id + 1;
            if ($this->lastupdate > 1) {
                $this->config->write('main', "lastUpdateID", $this->lastupdate);
                $this->config->updateFile();
            }
            sleep(1);
        }
    }

    /**
     *
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
     *
     * @param array $user –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     * @param string $chat_id –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
     */
    public function infoAboutU($user, $chat_id)
    {
        if ($user["id"] != null &&
            $user["id"] != null &&
            $this->users->read($user["id"], "chat_id", null) != $chat_id) {

            $this->users->write($user["id"], "first_name", $user["first_name"]);
            $this->users->write($user["id"], "last_name", $user["last_name"]);
            $this->users->write($user["id"], "username", $user["username"]);
            $this->users->write($user["id"], "language", $user["language_code"]);
            $this->users->write($user["id"], "chat_id", $chat_id);

            $this->users->updateFile();
        }
    }
}
